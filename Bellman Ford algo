// Bellman-Ford Algorithm
#include <vector>
#include <stdexcept>

using namespace std;

struct Edge {
    int source;
    int destination;
    int weight;
};

const int INF = 1e9;

vector<int> bellmanFord(vector<Edge>& edges, int num_vertices, int source) {
    vector<int> distances(num_vertices, INF);
    distances[source] = 0;

    for (int i = 0; i < num_vertices - 1; i++) {
        for (const Edge& edge : edges) {
            int u = edge.source;
            int v = edge.destination;
            int weight = edge.weight;

            if (distances[u] != INF && distances[u] + weight < distances[v]) {
                distances[v] = distances[u] + weight;
            }
        }
    }

    for (const Edge& edge : edges) {
        int u = edge.source;
        int v = edge.destination;
        int weight = edge.weight;

        if (distances[u] != INF && distances[u] + weight < distances[v]) {
            throw runtime_error("Graph contains a negative-weight cycle");
        }
    }

    return distances;
}
