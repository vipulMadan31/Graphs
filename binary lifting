#include <bits/stdc++.h>
using namespace std;

void giveParent(vector<int>& parent, int root, vector<vector<int>>& adj) {
    for (auto x : adj[root]) {
        if (x != root) {
            parent[x] = root;
            giveParent(parent, x, adj);
        }
    }
}

int giveKthParent(vector<vector<int>>& dp, int k, int node) {
    if (k == 0) return node;
    int i = log2(k); // just smaller
    int x = dp[node][i];
    return giveKthParent(dp, k - (1 << i), x);
}

vector<vector<int>> binaryLifting(vector<vector<int>>& adj, int n) {
    vector<int> parent(n + 1, -1);
    giveParent(parent, 1, adj); // assume the root is 1

    int max_parents = 2;
    vector<vector<int>> dp(n + 1, vector<int>(max_parents + 1, -1)); // dp[i][j] represents jth parent of node i

    for (int i = 1; i <= n; i++) dp[i][0] = parent[i];

    for (int i = 1; i <= n; i++) {
        for (int j = 1; (1 << j) < n; j++) {
            if (dp[i][j - 1] != -1) {
                int x = dp[i][j - 1];
                dp[i][j] = dp[x][j - 1];
            }
        }
    }

    // Return the dp table
    return dp;
}

int main() {
    vector<vector<int>> adj = {{}, {2, 3}, {4, 5}, {6, 7}, {}, {}, {}, {}};
    int n = 7;

    vector<vector<int>> dp = binaryLifting(adj, n);

    // Debugging: Print dp table
    for (int i = 1; i <= n; i++) {
        for (int j = 0; j < dp[i].size(); j++) {
            cout << dp[i][j] << " ";
        }
        cout << endl;
    }

    return 0;
}
