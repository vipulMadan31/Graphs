#include <vector>
#include <limits>

using namespace std;

const int INF = 1e9;

vector<vector<int>> floydWarshall(const vector<vector<int>>& graph) {
    int num_vertices = graph.size();
    vector<vector<int>> dist(num_vertices, vector<int>(num_vertices, INF));

    // Initialize dist[][] with given edge weights
    for (int i = 0; i < num_vertices; ++i) {
        for (int j = 0; j < num_vertices; ++j) {
            dist[i][j] = graph[i][j];
        }
    }

    // Apply Floyd-Warshall algorithm
    for (int k = 0; k < num_vertices; ++k) {
        for (int i = 0; i < num_vertices; ++i) {
            for (int j = 0; j < num_vertices; ++j) {
                if (dist[i][k] != INF && dist[k][j] != INF) {
                    if (dist[i][j] > dist[i][k] + dist[k][j]) {
                        dist[i][j] = dist[i][k] + dist[k][j];
                    }
                }
            }
        }
    }

    return dist;
}
